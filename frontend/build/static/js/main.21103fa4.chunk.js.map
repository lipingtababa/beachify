{"version":3,"sources":["ThankYou.js","Rate.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["ThankYou","className","Rate","rate","setRate","maxValue","minValue","value","onChange","type","App","React","useState","submitted","setSubmitted","src","alt","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"mSAyBeA,EAlBE,WAEf,OACE,oCACE,qEACuC,yBAAKC,UAAU,gBAAf,MADvC,eAGA,6BACA,sDAGA,2DCmBSC,EAhCF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,QACnB,OACE,oCACE,yBAAKH,UAAU,YACb,iEACA,kBAAC,IAAD,CACEA,UAAU,cACVI,SAAU,GACVC,SAAU,EACVC,MAAOJ,EACPK,SAAU,SAAAD,GAAK,OAAIH,EAAQG,OAG/B,yBAAKN,UAAU,YACb,mEACA,yBAAKA,UAAU,YACb,2BAAOQ,KAAK,aACZ,2CAEF,yBAAKR,UAAU,YACb,2BAAOQ,KAAK,aACZ,kDAEF,yBAAKR,UAAU,YACb,2BAAOQ,KAAK,aACZ,4CCkBKC,EAxCH,WAAO,IAAD,EACQC,IAAMC,SAAS,GADvB,mBACTT,EADS,KACHC,EADG,OAEkBO,IAAMC,UAAS,GAFjC,mBAETC,EAFS,KAEEC,EAFF,KAIhB,OACE,yBAAKb,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,kBACb,yBACEc,IAAI,wEACJd,UAAU,wBACVe,IAAI,WACN,uBAAGf,UAAU,UAAb,SAEF,yBAAKA,UAAU,gBACb,uBAAGA,UAAU,YAAb,aACA,yBACEc,IAAI,0EACJd,UAAU,wBACVe,IAAI,aAGV,yBAAKf,UAAU,QACZY,EACC,kBAAC,EAAD,MACA,oCACE,kBAAC,EAAD,CAAMV,KAAMA,EAAMC,QAASA,IAC3B,4BACEH,UAAU,aACVgB,QAAS,kBAAMH,GAAa,KAF9B,cCvBQI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.21103fa4.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './ThankYou.css';\nimport InputRange from 'react-input-range';\nimport 'react-input-range/lib/css/index.css';\n\n\nconst ThankYou = () => {\n\n  return (\n    <>\n      <div>\n        You just helped the Earth and earned <div className=\"stars-earned\">54</div> new stars!\n      </div>\n      <br />\n      <div>\n        How awesome is that!?\n      </div>\n      <div>\n        Share with your friends!\n      </div>\n    </>\n  );\n};\n\nexport default ThankYou;\n","import React from 'react';\nimport './App.css';\nimport InputRange from 'react-input-range';\nimport 'react-input-range/lib/css/index.css';\n\nconst Rate = ({rate, setRate}) => {\n  return (\n    <>\n      <div className=\"question\">\n        <h3>How clean is the beach you're at?</h3>\n        <InputRange\n          className=\"input-range\"\n          maxValue={10}\n          minValue={0}\n          value={rate}\n          onChange={value => setRate(value)}\n        />\n      </div>\n      <div className=\"question\">\n        <h3>What is the most common trash here?</h3>\n        <div className=\"checkbox\">\n          <input type=\"checkbox\"/>\n          <label>Plastic</label>\n        </div>\n        <div className=\"checkbox\">\n          <input type=\"checkbox\"/>\n          <label>Cans / bottles</label>\n        </div>\n        <div className=\"checkbox\">\n          <input type=\"checkbox\"/>\n          <label>Other</label>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Rate;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'react-input-range/lib/css/index.css';\nimport ThankYou from './ThankYou';\nimport Rate from './Rate';\n\n\nconst App = () => {\n  const [rate, setRate] = React.useState(7);\n  const [submitted, setSubmitted] = React.useState(false);\n\n  return (\n    <div className=\"App\">\n      <nav className=\"navbar\">\n        <div className=\"points-section\">\n          <img\n            src=\"https://pics.clipartpng.com/midle/Blue_Starfish_PNG_Clip_Art-1718.png\"\n            className=\"navbar-img points-img\"\n            alt=\"points\"/>\n          <p className=\"points\">3607</p>\n        </div>\n        <div className=\"user-section\">\n          <p className=\"username\">Jay Bravo</p>\n          <img\n            src=\"https://bramdejager.files.wordpress.com/2019/05/bramdejager-600x600.png\"\n            className=\"navbar-img avatar-img\"\n            alt=\"points\"/>\n        </div>\n      </nav>\n      <div className=\"main\">\n        {submitted ?\n          <ThankYou/> :\n          <>\n            <Rate rate={rate} setRate={setRate}/>\n            <button\n              className=\"App-button\"\n              onClick={() => setSubmitted(true)}\n            >\n              Submit\n            </button>\n          </>}\n      </div>\n\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}