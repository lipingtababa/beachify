{"version":3,"sources":["ThankYou.js","Rate.js","App.js","serviceWorker.js","index.js"],"names":["ThankYou","setSubmitted","className","Math","floor","random","src","alt","onClick","Rate","rate","setRate","plastic","setPlastic","cans","setCans","other","setOther","maxValue","minValue","value","onChange","App","React","useState","submitted","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PA0DeA,G,gBArDE,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAwBjB,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,cAAf,wCAEuC,yBAAKA,UAAU,gBAAgBC,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,IAFvG,aAIA,6BACA,sDAGA,6BACA,sFAGA,yBAAKH,UAAU,SAASI,IAAI,mHAAmHC,IAAI,aACnJ,yBAAKL,UAAU,SAASI,IAAI,qEAAqEC,IAAI,cACrG,yBAAKL,UAAU,SAASI,IAAI,wEAAwEC,IAAI,cAExG,6BACA,4BACEL,UAAU,kBACVM,QAAS,kBAAMP,GAAa,KAF9B,wB,iBCLSQ,EAtCF,SAAC,GAA0E,IAAzEC,EAAwE,EAAxEA,KAAMC,EAAkE,EAAlEA,QAASC,EAAyD,EAAzDA,QAASC,EAAgD,EAAhDA,WAAYC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SAgBvE,OACE,oCACE,yBAAKf,UAAU,YACb,iEACA,kBAAC,IAAD,CACEA,UAAU,cACVgB,SAAU,EACVC,SAAU,EACVC,MAAOV,EACPW,SAAU,SAAAD,GAAK,OAAIT,EAAQS,OAG/B,yBAAKlB,UAAU,YACb,mEACA,4BAAQA,UAAS,sBAAiBU,EAAU,UAAY,IAAMJ,QA5B9C,WACpBK,GAAYD,KA2BR,WACA,4BAAQV,UAAS,sBAAiBY,EAAO,UAAY,IAAMN,QAzB9C,WACjBO,GAASD,KAwBL,kBACA,4BAAQZ,UAAS,sBAAiBc,EAAQ,UAAY,IAAMR,QArB9C,WAClBS,GAAUD,KAoBN,YCsBOM,EApDH,WAAO,IAAD,EACQC,IAAMC,SAAS,GADvB,mBACTd,EADS,KACHC,EADG,OAEkBY,IAAMC,UAAS,GAFjC,mBAETC,EAFS,KAEExB,EAFF,OAGcsB,IAAMC,UAAS,GAH7B,mBAGTZ,EAHS,KAGAC,EAHA,OAIQU,IAAMC,UAAS,GAJvB,mBAITV,EAJS,KAIHC,EAJG,OAKUQ,IAAMC,UAAS,GALzB,mBAKTR,EALS,KAKFC,EALE,KAOhB,OACE,yBAAKf,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,kBACb,yBACEI,IAAI,wEACJJ,UAAU,wBACVK,IAAI,WACN,uBAAGL,UAAU,UAAb,SAEF,yBAAKA,UAAU,gBACb,uBAAGA,UAAU,YAAb,aACA,yBACEI,IAAI,0EACJJ,UAAU,wBACVK,IAAI,aAGV,yBAAKL,UAAU,QACZuB,EACC,kBAAC,EAAD,CAAUxB,aAAcA,IACxB,oCACE,kBAAC,EAAD,CACES,KAAMA,EACNC,QAASA,EACTE,WAAYA,EACZD,QAASA,EACTI,MAAOA,EACPC,SAAUA,EACVH,KAAMA,EACNC,QAASA,IAEX,4BACEb,UAAU,aACVM,QAAS,kBAAMP,GAAa,KAF9B,cClCQyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e8a4a606.chunk.js","sourcesContent":["import React from 'react';\nimport './ThankYou.css';\nimport 'react-input-range/lib/css/index.css';\n\n\nconst ThankYou = ({setSubmitted}) => {\n  // const myRand = () => {\n  //   let r = 50\n  //   while (40 < r && r < 60) {\n  //     r = Math.random() * 100\n  //   }\n  //   return r\n  // };\n  //\n  // const renderStar = () => {\n  //     const delay = Math.random() + 's';\n  //     el.src            = 'https://dl.dropboxusercontent.com/s/soxcov4m81dx55l/star.svg'\n  //     el.className      = 'glitter-star'\n  //     el.style.top      = myRand() + '%'\n  //     el.style.left     = myRand() + '%'\n  //     el.style.animationDelay       = delay\n  //     el.style.msAnimationDelay     = delay\n  //     el.style.webkitAnimationDelay = delay\n  //     el.style.monAnimationDelay    = delay\n  //\n  //   return <img src={'https://dl.dropboxusercontent.com/s/soxcov4m81dx55l/star.svg'}\n  //\n  //   />\n  // };\n  return (\n    <div className=\"thank-you\">\n      <div className=\"you-earned\">\n        {/*{Array.apply(null, Array(5)).map(renderStar)}*/}\n        You just helped the Earth and earned <div className=\"stars-earned\">{Math.floor(Math.random() * 20) + 35}</div>seastars!\n      </div>\n      <br />\n      <div>\n        How awesome is that!?\n      </div>\n      <br />\n      <div>\n        Make a photo or video and share with your friends on:\n      </div>\n      <img className=\"social\" src=\"https://icon-library.net/images/facebook-icon-transparent-background/facebook-icon-transparent-background-14.jpg\" alt=\"facebook\"/>\n      <img className=\"social\" src=\"https://image.freepik.com/free-vector/instagram-icon_1057-2227.jpg\" alt=\"instagram\"/>\n      <img className=\"social\" src=\"https://image.shutterstock.com/image-photo/image-260nw-1273064443.jpg\" alt=\"instagram\"/>\n\n      <br />\n      <button\n        className=\"continue-button\"\n        onClick={() => setSubmitted(false)}\n      >\n        Continue the fun!\n      </button>\n    </div>\n  );\n};\n\nexport default ThankYou;\n","import React from 'react';\nimport './App.css';\nimport InputRange from 'react-input-range';\nimport 'react-input-range/lib/css/index.css';\n\nconst Rate = ({rate, setRate, plastic, setPlastic, cans, setCans, other, setOther}) => {\n\n  const togglePlastic = () => {\n    setPlastic(!plastic);\n  };\n\n  const toggleCans = () => {\n    setCans(!cans);\n  };\n\n\n  const toggleOther = () => {\n    setOther(!other);\n  };\n\n\n  return (\n    <>\n      <div className=\"question\">\n        <h3>How clean is the beach you're at?</h3>\n        <InputRange\n          className=\"input-range\"\n          maxValue={5}\n          minValue={0}\n          value={rate}\n          onChange={value => setRate(value)}\n        />\n      </div>\n      <div className=\"question\">\n        <h3>What is the most common trash here?</h3>\n        <button className={`type-toggle ${plastic ? 'toggled' : ''}`} onClick={togglePlastic}>Plastic</button>\n        <button className={`type-toggle ${cans ? 'toggled' : ''}`} onClick={toggleCans}>Cans / bottles</button>\n        <button className={`type-toggle ${other ? 'toggled' : ''}`} onClick={toggleOther}>Other</button>\n      </div>\n    </>\n  );\n};\n\nexport default Rate;\n","import React from 'react';\nimport './App.css';\nimport 'react-input-range/lib/css/index.css';\nimport ThankYou from './ThankYou';\nimport Rate from './Rate';\n\n\nconst App = () => {\n  const [rate, setRate] = React.useState(4);\n  const [submitted, setSubmitted] = React.useState(false);\n  const [plastic, setPlastic] = React.useState(false);\n  const [cans, setCans] = React.useState(false);\n  const [other, setOther] = React.useState(false);\n\n  return (\n    <div className=\"App\">\n      <nav className=\"navbar\">\n        <div className=\"points-section\">\n          <img\n            src=\"https://pics.clipartpng.com/midle/Blue_Starfish_PNG_Clip_Art-1718.png\"\n            className=\"navbar-img points-img\"\n            alt=\"points\"/>\n          <p className=\"points\">3607</p>\n        </div>\n        <div className=\"user-section\">\n          <p className=\"username\">Jay Bravo</p>\n          <img\n            src=\"https://bramdejager.files.wordpress.com/2019/05/bramdejager-600x600.png\"\n            className=\"navbar-img avatar-img\"\n            alt=\"points\"/>\n        </div>\n      </nav>\n      <div className=\"main\">\n        {submitted ?\n          <ThankYou setSubmitted={setSubmitted}/> :\n          <>\n            <Rate\n              rate={rate}\n              setRate={setRate}\n              setPlastic={setPlastic}\n              plastic={plastic}\n              other={other}\n              setOther={setOther}\n              cans={cans}\n              setCans={setCans}\n            />\n            <button\n              className=\"App-button\"\n              onClick={() => setSubmitted(true)}\n            >\n              Submit\n            </button>\n          </>}\n      </div>\n\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}